Imports System.Collections.Generic

''' <summary>
''' Engine input file
''' </summary>
''' <remarks></remarks>
Public Class cENG

    ''' <summary>
    ''' Current format version
    ''' </summary>
    ''' <remarks></remarks>
    Private Const FormatVersion As Short = 1

    ''' <summary>
    ''' Format version of input file. Defined in ReadFile.
    ''' </summary>
    ''' <remarks></remarks>
    Private FileVersion As Short

    ''' <summary>
    ''' Engine description (model, type, etc.). Saved in input file.
    ''' </summary>
    ''' <remarks></remarks>
    Public ModelName As String

    ''' <summary>
    ''' Engine displacement [ccm]. Saved in input file.
    ''' </summary>
    ''' <remarks></remarks>
    Public Displ As Single

    ''' <summary>
    ''' Idling speed [1/min]. Saved in input file.
    ''' </summary>
    ''' <remarks></remarks>
    Public Nidle As Single

    ''' <summary>
    ''' Rotational inertia including flywheel [kgm²]. Saved in input file. Overwritten by generic value in Declaration mode.
    ''' </summary>
    ''' <remarks></remarks>
    Public I_mot As Single

    ''' <summary>
    ''' List of full load/motoring curve files (.vfld)
    ''' </summary>
    ''' <remarks></remarks>
    Public fFLD As List(Of cSubPath)

    ''' <summary>
    ''' Path to fuel consumption map
    ''' </summary>
    ''' <remarks></remarks>
    Private fMAP As cSubPath

    ''' <summary>
    ''' List of gear-assignments for the given .vfld files.
    ''' </summary>
    ''' <remarks></remarks>
    Public FLDgears As List(Of String)

    ''' <summary>
    ''' Directory of engine file. Defined in FilePath property (Set)
    ''' </summary>
    ''' <remarks></remarks>
    Private MyPath As String

    ''' <summary>
    ''' Full file path. Needs to be defined via FilePath property before calling ReadFile or SaveFile.
    ''' </summary>
    ''' <remarks></remarks>
    Private sFilePath As String

    ''' <summary>
    ''' True= File is not in JSON Format. Defined in ReadFile.
    ''' </summary>
    ''' <remarks></remarks>
    Public NoJSON As Boolean

    ''' <summary>
    ''' List of sub input files (e.g. FC map). Can be accessed by FileList property. Generated by CreateFileList.
    ''' </summary>
    ''' <remarks></remarks>
    Private MyFileList As List(Of String)

    ''' <summary>
    ''' WHTC Urban test results. Saved in input file. 
    ''' </summary>
    ''' <remarks></remarks>
    Public WHTCurban As Single

    ''' <summary>
    ''' WHTC Rural test results. Saved in input file. 
    ''' </summary>
    ''' <remarks></remarks>
    Public WHTCrural As Single

    ''' <summary>
    ''' WHTC Motorway test results. Saved in input file. 
    ''' </summary>
    ''' <remarks></remarks>
    Public WHTCmw As Single

    ''' <summary>
    ''' Rated engine speed [1/min]. Engine speed at max. power. Defined in Init.
    ''' </summary>
    ''' <remarks></remarks>
    Public Nrated As Single

    ''' <summary>
    ''' Maximum engine power [kW]. Power at rated engine speed.
    ''' </summary>
    ''' <remarks></remarks>
    Public Pmax As Single

    ''' <summary>
    ''' Generates list of all sub input files (e.g. FC map). Sets MyFileList.
    ''' </summary>
    ''' <returns>True if successful.</returns>
    ''' <remarks></remarks>
    Public Function CreateFileList() As Boolean
        Dim sb As cSubPath

        MyFileList = New List(Of String)

        For Each sb In Me.fFLD
            MyFileList.Add(sb.FullPath)
        Next

        MyFileList.Add(PathMAP)

        'Not used!!! MyFileList.Add(PathWHTC)

        Return True

    End Function

    ''' <summary>
    ''' New instance. Initialise
    ''' </summary>
    ''' <remarks></remarks>
    Public Sub New()
        MyPath = ""
        sFilePath = ""
        fMAP = New cSubPath
        SetDefault()
    End Sub

    ''' <summary>
    ''' Set default values
    ''' </summary>
    ''' <remarks></remarks>
    Private Sub SetDefault()
        ModelName = "Undefined"
        Displ = 0
        Nidle = 0
        I_mot = 0
        Nrated = 0
        Pmax = 0

        fFLD = New List(Of cSubPath)
        FLDgears = New List(Of String)

        fMAP.Clear()

        WHTCurban = 0
        WHTCrural = 0
        WHTCmw = 0


    End Sub

    ''' <summary>
    ''' Read file in old csv format. Called by ReadFile if file is not in JSON format.
    ''' </summary>
    ''' <returns>True if successful.</returns>
    ''' <remarks></remarks>
    Private Function ReadFileOld(ByVal ShowMsg As Boolean) As Boolean
        Dim MsgSrc As String
        Dim file As cFile_V3
        Dim line() As String
        Dim OldFile As Boolean = False
        Dim i As Integer

        MsgSrc = "ENG/ReadFile"

        SetDefault()


        If sFilePath = "" Or Not IO.File.Exists(sFilePath) Then
            If ShowMsg Then WorkerMsg(tMsgID.Err, "Engine file not found (" & sFilePath & ") !", MsgSrc)
            Return False
        End If

        file = New cFile_V3

        If Not file.OpenRead(sFilePath) Then
            If ShowMsg Then WorkerMsg(tMsgID.Err, "Failed to open file (" & sFilePath & ") !", MsgSrc)
            file = Nothing
            Return False
        End If

        Try
            ModelName = file.ReadLine(0).Replace("\c\", ",")
            file.ReadLine()  'NOT USED (Pnenn)
            Displ = CSng(file.ReadLine(0))
            file.ReadLine()  'NOT USED (nnenn)
            Nidle = CSng(file.ReadLine(0))
            I_mot = CSng(file.ReadLine(0))


            i = -1
            Do While Not file.EndOfFile

                line = file.ReadLine
                i += 1

                If line(0) = sKey.Break Then Exit Do

                If i = 0 AndAlso UBound(line) < 1 Then OldFile = True

                fFLD.Add(New cSubPath)

                fFLD(i).Init(MyPath, line(0))

                If OldFile Then
                    FLDgears.Add("0 - 99")
                    Exit Do
                Else
                    FLDgears.Add(line(1))
                End If

            Loop

            fMAP.Init(MyPath, file.ReadLine(0))
        Catch ex As Exception
            If ShowMsg Then WorkerMsg(tMsgID.Err, ex.Message, MsgSrc)
            file.Close()
            Return False
        End Try


        file.Close()
        Return True

    End Function

    ''' <summary>
    ''' Save file. <see cref="P:VECTO.cENG.FilePath" /> must be set before calling.
    ''' </summary>
    ''' <returns>True if successful.</returns>
    ''' <remarks></remarks>
    Public Function SaveFile() As Boolean
        Dim i As Integer
        Dim JSON As New cJSON
        Dim dic As Dictionary(Of String, Object)
        Dim dic0 As Dictionary(Of String, Object)
        Dim ls As List(Of Object)

        'Header
        dic = New Dictionary(Of String, Object)
        dic.Add("CreatedBy", Lic.LicString & " (" & Lic.GUID & ")")
        dic.Add("Date", Now.ToString)
        dic.Add("AppVersion", VECTOvers)
        dic.Add("FileVersion", FormatVersion)
        JSON.Content.Add("Header", dic)

        'Body
        dic = New Dictionary(Of String, Object)

        dic.Add("ModelName", ModelName)

        dic.Add("Displacement", Displ)
        dic.Add("IdlingSpeed", Nidle)
        dic.Add("Inertia", I_mot)

        ls = New List(Of Object)
        For i = 0 To fFLD.Count - 1
            dic0 = New Dictionary(Of String, Object)
            dic0.Add("Path", fFLD(i).PathOrDummy)
            dic0.Add("Gears", FLDgears(i))
            ls.Add(dic0)
        Next
        dic.Add("FullLoadCurves", ls)

        dic.Add("FuelMap", fMAP.PathOrDummy)

        dic.Add("WHTC-Urban", WHTCurban)
        dic.Add("WHTC-Rural", WHTCrural)
        dic.Add("WHTC-Motorway", WHTCmw)


        JSON.Content.Add("Body", dic)


        Return JSON.WriteFile(sFilePath)


    End Function

    ''' <summary>
    ''' Read file. <see cref="P:VECTO.cENG.FilePath" /> must be set before calling.
    ''' </summary>
    ''' <returns>True if successful.</returns>
    ''' <remarks></remarks>
    Public Function ReadFile(Optional ByVal ShowMsg As Boolean = True) As Boolean
        Dim MsgSrc As String
        Dim i As Integer
        Dim JSON As New cJSON
        Dim dic As Object

        MsgSrc = "ENG/ReadFile"

        'Flag for "File is not JSON" Warnings        
        NoJSON = False

        SetDefault()


        If Not JSON.ReadFile(sFilePath) Then
            NoJSON = True
            Try
                Return ReadFileOld(ShowMsg)
            Catch ex As Exception
                Return False
            End Try
        End If

        Try

            FileVersion = JSON.Content("Header")("FileVersion")

            ModelName = JSON.Content("Body")("ModelName")

            Displ = JSON.Content("Body")("Displacement")
            Nidle = JSON.Content("Body")("IdlingSpeed")
            I_mot = JSON.Content("Body")("Inertia")

            i = -1
            For Each dic In JSON.Content("Body")("FullLoadCurves")
                i += 1
                fFLD.Add(New cSubPath)
                fFLD(i).Init(MyPath, dic("Path"))
                FLDgears.Add(dic("Gears"))
            Next

            fMAP.Init(MyPath, JSON.Content("Body")("FuelMap"))

            If Not JSON.Content("Body")("WHTC-Urban") Is Nothing Then
                WHTCurban = CSng(JSON.Content("Body")("WHTC-Urban"))
                WHTCrural = CSng(JSON.Content("Body")("WHTC-Rural"))
                WHTCmw = CSng(JSON.Content("Body")("WHTC-Motorway"))
            End If

        Catch ex As Exception
            If ShowMsg Then WorkerMsg(tMsgID.Err, "Failed to read VECTO file! " & ex.Message, MsgSrc)
            Return False
        End Try

        Return True

    End Function

    ''' <summary>
    ''' Initialise for calculation. File must be read already.
    ''' </summary>
    ''' <returns>True if successful.</returns>
    ''' <remarks></remarks>
    Public Function Init() As Boolean
        Dim fl As cFLD
        Dim fldgear As Dictionary(Of Integer, String)
        Dim fldgFromTo As String()
        Dim str As String
        Dim i As Integer
        Dim j As Integer

        Dim MsgSrc As String
        MsgSrc = "ENG/Init"

        'Create cFLD instance for each gear (list with gear as index)
        FLD = New List(Of cFLD)

        If FLDgears.Count = 0 Then
            WorkerMsg(tMsgID.Err, "No .vfld file defined in Engine file!", MsgSrc, "<GUI>" & sFilePath)
            Return False
        End If

        fldgear = New Dictionary(Of Integer, String)

        Try
            j = -1
            For Each str In FLDgears

                j += 1
                If str.Contains("-") Then
                    fldgFromTo = str.Replace(" ", "").Split("-")
                Else
                    fldgFromTo = New String() {str, str}
                End If

                For i = CInt(fldgFromTo(0)) To CInt(fldgFromTo(1))

                    If i > GBX.GearCount Then Exit For

                    If i < 0 Or i > 99 Then
                        WorkerMsg(tMsgID.Err, "Cannot assign .vfld file to gear " & i & "!", MsgSrc, "<GUI>" & sFilePath)
                        Return False
                    End If

                    If fldgear.ContainsKey(i) Then
                        WorkerMsg(tMsgID.Err, "Multiple .vfld files are assigned to gear " & i & "!", MsgSrc, "<GUI>" & sFilePath)
                        Return False
                    End If

                    fldgear.Add(i, PathFLD(j))

                Next

            Next
        Catch ex As Exception
            WorkerMsg(tMsgID.Err, "Failed to process engine file '" & sFilePath & "'!", MsgSrc)
            Return False
        End Try

        'read .vfld files
        For i = 0 To GBX.GearCount

            If Not fldgear.ContainsKey(i) Then
                WorkerMsg(tMsgID.Err, "No .vfld file assigned to gear " & i & "!", MsgSrc, "<GUI>" & sFilePath)
                Return False
            End If

            FLD.Add(New cFLD)
            FLD(i).FilePath = fldgear(i)

            Try
                If Not FLD(i).ReadFile Then Return False 'Error message in ReadFile
            Catch ex As Exception
                WorkerMsg(tMsgID.Err, "File read error! (" & fldgear(i) & ")", MsgSrc, fldgear(i))
                Return False
            End Try

            FLD(i).Init(Nidle)

        Next

        'Read FC map
        MAP = New cMAP
        MAP.FilePath = PathMAP

        Try
            If Not MAP.ReadFile Then Return False 'Fehlermeldung hier nicht notwendig weil schon von in ReadFile
        Catch ex As Exception
            WorkerMsg(tMsgID.Err, "File read error! (" & PathMAP & ")", MsgSrc, PathMAP)
            Return False
        End Try

        'Triangulate FC map.
        If Not MAP.Triangulate() Then
            WorkerMsg(tMsgID.Err, "Failed to triangulate FC map! (" & PathMAP & ")", MsgSrc, PathMAP)
            Return False
        End If


        'Special rpms for Shift Model and WHTC de-normalisation
        fl = FLD(0)

        Nrated = fl.fnUrated

        Pmax = fl.Pfull(fl.fnUrated)

        Return True

    End Function

    ''' <summary>
    ''' Set generic values for Declaration Mode  
    ''' </summary>
    ''' <returns>True if successful.</returns>
    ''' <remarks></remarks>
    Public Function DeclInit() As Boolean
        Dim f0 As cFLD

        I_mot = Declaration.EngInertia(Displ)

        For Each f0 In FLD
            f0.DeclInit()
        Next

        Return True
    End Function

    ''' <summary>
    ''' Returns list of sub input files after calling CreateFileList.
    ''' </summary>
    ''' <value></value>
    ''' <returns>list of sub input files</returns>
    ''' <remarks></remarks>
    Public ReadOnly Property FileList As List(Of String)
        Get
            Return MyFileList
        End Get
    End Property

    ''' <summary>
    ''' Get or set Filepath before calling <see cref="M:VECTO.cENG.ReadFile" /> or <see cref="M:VECTO.cENG.SaveFile" />
    ''' </summary>
    ''' <value></value>
    ''' <returns>Full filepath</returns>
    ''' <remarks></remarks>
    Public Property FilePath() As String
        Get
            Return sFilePath
        End Get
        Set(ByVal value As String)
            sFilePath = value
            If sFilePath = "" Then
                MyPath = ""
            Else
                MyPath = IO.Path.GetDirectoryName(sFilePath) & "\"
            End If
        End Set
    End Property

    ''' <summary>
    ''' Get or set file path (cSubPath) of .vfld file for each gear range.
    ''' </summary>
    ''' <param name="x">Index</param>
    ''' <param name="Original">True= (relative) file path as saved in file; False= full file path</param>
    ''' <value></value>
    ''' <returns>Relative or absolute file path for each gear range</returns>
    ''' <remarks></remarks>
    Public Property PathFLD(ByVal x As Short, Optional ByVal Original As Boolean = False) As String
        Get
            If Original Then
                Return fFLD(x).OriginalPath
            Else
                Return fFLD(x).FullPath
            End If
        End Get
        Set(ByVal value As String)
            fFLD(x).Init(MyPath, value)
        End Set
    End Property

    ''' <summary>
    ''' Get or set file path (cSubPath) to FC map (.vmap)
    ''' </summary>
    ''' <param name="Original">True= (relative) file path as saved in file; False= full file path</param>
    ''' <value></value>
    ''' <returns>Relative or absolute file path to FC map</returns>
    ''' <remarks></remarks>
    Public Property PathMAP(Optional ByVal Original As Boolean = False) As String
        Get
            If Original Then
                Return fMAP.OriginalPath
            Else
                Return fMAP.FullPath
            End If
        End Get
        Set(ByVal value As String)
            fMAP.Init(MyPath, value)
        End Set
    End Property

End Class
